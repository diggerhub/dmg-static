{"version":3,"sources":["main.js"],"names":["isDropDownExtended","element","classList","contains","BgAnimationHandler","event","icon","bgElement","add","removeEventListener","updateDropDownLabel","target","dropDownLabel","innerHTML","elm","text","dropDown","children","remove","innerText","dropDownAnimationHandler","parent","dropDownElement","counterControlsHandler","counters","console","log","dropDownClickHandler","addEventListener","tagName","accountMenuClickHandler","document","dropDownParent","getElementsByClassName","dropDownIcon","dropDownBg","getElementsByTagName","accountParent","counterTargets"],"mappings":"AAKA,IAAIA,mBAAsBC,SAAYA,QAAQC,UAAUC,SAAS,kBAU7DC,mBAAqB,CAACC,MAAOJ,QAASK,KAAMC,aAC5CN,QAAQC,UAAUM,IAAI,kBACtBF,KAAKJ,UAAUM,IAAI,kBACnBD,UAAUE,oBAAoB,gBAAiBL,qBAM/CM,oBAAsBC,SACPC,cAAcC,UAE7B,IAAKC,OADLF,cAAcC,UAAYF,OAAOI,KACrBC,SAASC,UACjBH,IAAIZ,UAAUgB,OAAO,UACjBJ,IAAIK,YAAcP,cAAcC,WAAWC,IAAIZ,UAAUM,IAAI,WASrEY,yBAA2B,CAACf,MAAOgB,OAAQC,mBAC3C,IAAKR,OAAOO,OAAOJ,SACXH,IAAIZ,UAAUC,SAAS,gBACvBW,IAAIZ,UAAUgB,OAAO,sBAErBJ,IAAIZ,UAAUC,SAAS,kBACvBW,IAAIZ,UAAUgB,OAAO,kBAG7BI,gBAAgBb,oBAAoB,gBAAiBW,2BAOrDG,uBAA0BC,WAC1B,IAAK,IAAIb,UAAUa,SACfC,QAAQC,IAAIf,OAAOM,aAmBvBU,qBAAuB,CAACN,OAAQd,UAAWe,gBAAiBhB,QAC5De,OAAOO,iBAAiB,QAASvB,QAE7B,GAD6B,MAAzBA,MAAMM,OAAOkB,SAAiBnB,oBAAoBL,MAAMM,QACvDX,mBAAmBsB,iBAWpBA,gBAAgBpB,UAAUgB,OAAO,kBACjCZ,KAAKJ,UAAUgB,OAAO,kBACtBI,gBAAgBM,iBAAiB,gBAAiBR,yBAAyBf,MAAOgB,OAAQC,sBAbpD,CACtC,IAAKR,OAAOO,OAAOJ,SACXH,IAAIZ,UAAUC,SAAS,gBACvBW,IAAIZ,UAAUM,IAAI,sBAElBM,IAAIZ,UAAUC,SAAS,kBACvBW,IAAIZ,UAAUM,IAAI,kBAG1BD,UAAUqB,iBAAiB,gBAAiBxB,mBAAmBC,MAAOiB,gBAAiBhB,KAAMC,gBAYrGuB,wBAA2BT,SAC3BA,OAAOO,iBAAiB,QAASvB,QACzBgB,OAAOJ,SAAS,GAAGf,UAAUC,SAAS,UACtCkB,OAAOJ,SAAS,GAAGf,UAAUgB,OAAO,UAEpCG,OAAOJ,SAAS,GAAGf,UAAUM,IAAI,aAQ7CuB,SAASH,iBAAiB,mBAAoB,KAC1C,MAAMI,eAAoBD,SAASE,uBAAuB,YAAY,GAChEC,aAAoBH,SAASE,uBAAuB,gBAAgB,GACpEE,WAAoBJ,SAASE,uBAAuB,mBAAmB,GAEvEjB,UADoBe,SAASE,uBAAuB,aAAa,GAAGG,qBAAqB,MAAM,GAC3EL,SAASE,uBAAuB,YAAY,IAChEI,cAAoBN,SAASE,uBAAuB,WAAW,GAC/DK,eAAqBP,SAASE,uBAAuB,gBACjCF,SAASE,uBAAuB,cAE1DV,uBAAuBe,gBACvBX,qBAAqBK,eAAgBG,WAAYnB,SAAUkB,cAC3DJ,wBAAwBO","file":"main.js","sourcesContent":["/**\n * Checks if an elements contains the css class 'dropDownExpend'\n * @param element - an HTML element\n * @returns {boolean}\n */\nlet isDropDownExtended = (element) => element.classList.contains('dropDownExpend');\n/**\n * Adds the css classes to start the label and icon animations\n * Removes the transitionend event from the background element\n * @param event - The animation event\n * @param element - The drop down element\n * @param icon - The arrow Icon\n * @param bgElement - The drop down elements background\n * @constructor\n */\nlet BgAnimationHandler = (event, element, icon, bgElement) => {\n    element.classList.add('dropDownExpend');\n    icon.classList.add('dropDownRotate');\n    bgElement.removeEventListener('transitionend', BgAnimationHandler);\n};\n/**\n * Updates the drop down menu's label according to the user selection\n * @param target - The label element\n */\nlet updateDropDownLabel = target => {\n    let oldLabel = dropDownLabel.innerHTML;\n    dropDownLabel.innerHTML = target.text;\n    for (elm of dropDown.children) {\n        elm.classList.remove('hidden');\n        if (elm.innerText === dropDownLabel.innerHTML) elm.classList.add('hidden');\n    }\n};\n/**\n * Add or removes the css animation for the border and dropdown animation effect\n * @param event - The animation effect\n * @param parent - The element's parent\n * @param dropDownElement - The dropdown element\n */\nlet dropDownAnimationHandler = (event, parent, dropDownElement) => {\n    for (elm of parent.children) {\n        if (elm.classList.contains('outerBorder')) {\n            elm.classList.remove('outerBorderMoveOut');\n        }\n        if (elm.classList.contains('dropAnimation')) {\n            elm.classList.remove('dropDownMoveIn');\n        }\n    }\n    dropDownElement.removeEventListener('transitionend', dropDownAnimationHandler);\n};\n/**\n * Add or removes 1 when user clicks on the counter +/- elements\n * @param controls - The counter controls\n * @param target - The counter input element\n */\nlet counterControlsHandler = (counters) => {\n    for (let target of counters) {\n        console.log(target.children());\n    }\n    // for (let i = 0; i < 2; i++) {\n    //     Controls[i].addEventListener('click', event => {\n    //         if (Controls[i].classList.contains('addIncrement')) {\n    //             target.value++\n    //         } else {\n    //             if (target.value > 1) target.value--\n    //         }\n    //     })\n    // }\n};\n/**\n * Handles a users click on the drop down menu\n * @param parent - The elements parent\n * @param bgElement - Drop down background\n * @param dropDownElement - The element itself\n * @param icon - Arrow icon\n */\nlet dropDownClickHandler = (parent, bgElement, dropDownElement, icon) => {\n    parent.addEventListener('click', event => {\n        if (event.target.tagName === 'A') updateDropDownLabel(event.target);\n        if (!isDropDownExtended(dropDownElement)) {\n            for (elm of parent.children) {\n                if (elm.classList.contains('outerBorder')) {\n                    elm.classList.add('outerBorderMoveOut');\n                }\n                if (elm.classList.contains('dropAnimation')) {\n                    elm.classList.add('dropDownMoveIn');\n                }\n            }\n            bgElement.addEventListener('transitionend', BgAnimationHandler(event, dropDownElement, icon, bgElement))\n        } else {\n            dropDownElement.classList.remove('dropDownExpend');\n            icon.classList.remove('dropDownRotate');\n            dropDownElement.addEventListener('transitionend', dropDownAnimationHandler(event, parent, dropDownElement))\n        }\n    });\n};\n/**\n * Handles account menu interactions\n * @param parent - The parent element\n */\nlet accountMenuClickHandler = (parent) => {\n    parent.addEventListener('click', event => {\n        if (parent.children[2].classList.contains('fadeIn')) {\n            parent.children[2].classList.remove('fadeIn')\n        } else {\n            parent.children[2].classList.add('fadeIn')\n        }\n    });\n};\n\n/**\n * Runs when dom is ready\n */\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const dropDownParent    = document.getElementsByClassName('sortList')[0],\n          dropDownIcon      = document.getElementsByClassName('dropDownIcon')[0],\n          dropDownBg        = document.getElementsByClassName('labelBackground')[0],\n          dropDownLabel     = document.getElementsByClassName('sortLabel')[0].getElementsByTagName('h4')[0],\n          dropDown          = document.getElementsByClassName('dropDown')[0],\n          accountParent     = document.getElementsByClassName('account')[0],\n          counterTargets     = document.getElementsByClassName('number-input'),\n          counterControls   = document.getElementsByClassName('increments');\n\n    counterControlsHandler(counterTargets);\n    dropDownClickHandler(dropDownParent, dropDownBg, dropDown, dropDownIcon);\n    accountMenuClickHandler(accountParent);\n});"]}